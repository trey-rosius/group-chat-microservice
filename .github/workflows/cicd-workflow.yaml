name: Deploy the CDK Infrastructure and Build the Catalyst Service Images

on:
  push:
    branches:
        - main
env:
  AWS_REGION: us-east-1
  PROJECT_NAME: kv-project-fbe8f200-4
jobs:
  run-cicd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Install the CDK Dependency
        run: |
          npm install -g aws-cdk
      # Install Diagrid CLI
      - name: Install Diagrid CLI
        run: |
          # Download the latest Diagrid CLI from GitHub or direct source
          curl -o- https://downloads.diagrid.io/cli/install.sh | bash
          sudo mv ./diagrid /usr/local/bin
      # Log into diagrid
      - name: Log Into Diagrid
        run: |
          diagrid login --api-key {{secret.DIAGRID_API_KEY}}
      - name: Install other dependencies
        run: |
          npm install
        working-directory: ./cdk-infra
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: env.AWS_REGION
      - name: Synthesize CDK Stack
        run: cdk synth
        working-directory: ./cdk-infra
      - name: Bootstrap CDK Stack
        run: cdk bootstrap
        working-directory: ./cdk-infra

      - name: Deploy repoStackName to AWS
        run: cdk deploy repoStackName --require-approval=never
        working-directory: ./cdk-infra

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: env.AWS_REGION

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker images
        run: |
          for service in ./services/*/ ; do
            service_name=$(basename "$service")
            ecr_repo="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.env.AWS_REGION.amazonaws.com/$service_name"
            echo "Building Docker image for $service_name"
            docker build -t "$ecr_repo:latest" "$service"
            echo "Pushing Docker image to ECR for $service_name"
            docker push "$ecr_repo:latest"
          done


      - name: Deploy CdkInfraStack to AWS
        run: cdk deploy CdkInfraStack --require-approval=never
        working-directory: ./cdk-infra

      - name: Update Cluster to get the most recent image
        run: |
          for service in ./services/*/ ; do
            service_name=$(basename "$service")
            aws ecs update-service --cluster GROUP-CHAT-cluster --service $service_name --force-new-deployment
          done


      - name: Retrieving the DNS for the services and updating the appIDs
        run: |
          for service in ./services/*/ ; do
            alb_name=$(basename "$service")-ALB
            alb_dns=$(aws elbv2 describe-load-balancers --names $alb_name --query "LoadBalancers[0].DNSName" --output text)
            echo "ALB DNS: $alb_dns"
            echo "::set-output name=alb_dns::$alb_dns"
            diagrid appid update $service  --app-endpoint "http://$alb_dns"   --project env.PROJECT_NAME
           
          done

          
